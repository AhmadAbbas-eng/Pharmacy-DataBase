// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20231104105340_UpdateTaxIdLength")]
    partial class UpdateTaxIdLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Entities.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BatchId");

                    b.HasIndex("ProductId", "ProductionDate", "ExpiryDate");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Infrastructure.Entities.Cheque", b =>
                {
                    b.Property<int>("ChequeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChequeId"), 1L, 1);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("DateOfWriting")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDateOfCashing")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("ChequeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("Infrastructure.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("CustomerNID")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<double>("Debt")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerOrderBatch", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("OrderAmount")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "BatchId");

                    b.HasIndex("BatchId");

                    b.ToTable("CustomerOrderBatches");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerPhone", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("CustomerId", "Phone");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("Infrastructure.Entities.DrugDisposal", b =>
                {
                    b.Property<int>("DisposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisposalId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DisposalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("DisposalId");

                    b.HasIndex("BatchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.ToTable("DrugDisposals");
                });

            modelBuilder.Entity("Infrastructure.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<DateTime>("DateOfWork")
                        .HasColumnType("datetime2");

                    b.Property<double>("HourlyPaid")
                        .HasColumnType("float");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("IsManager")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Infrastructure.Entities.EmployeePhone", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("EmployeeId", "Phone");

                    b.ToTable("EmployeePhones");
                });

            modelBuilder.Entity("Infrastructure.Entities.EmployeeSalary", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId", "ManagerId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("Infrastructure.Entities.Income", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IncomeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Infrastructure.Entities.NameMenu", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductManufacturer")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("ProductId");

                    b.ToTable("NameMenus");
                });

            modelBuilder.Entity("Infrastructure.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Infrastructure.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("Infrastructure.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<double>("Dues")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("DateOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDateForPayment")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<float>("OrderCost")
                        .HasColumnType("real");

                    b.Property<float>("OrderDiscount")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierOrderBatch", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "BatchId");

                    b.HasIndex("BatchId");

                    b.ToTable("SupplierOrderBatches");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierPayment", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId", "PaymentId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierPhone", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierId", "Phone");

                    b.ToTable("SupplierPhones");
                });

            modelBuilder.Entity("Infrastructure.Entities.Tax", b =>
                {
                    b.Property<string>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TaxDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TaxValue")
                        .HasColumnType("float");

                    b.HasKey("TaxId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Infrastructure.Entities.TaxesPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId", "ManagerId", "TaxId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxesPayments");
                });

            modelBuilder.Entity("Infrastructure.Entities.WorkHours", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkedMonth")
                        .HasColumnType("int");

                    b.Property<int>("WorkedYear")
                        .HasColumnType("int");

                    b.Property<double>("HourlyPaid")
                        .HasColumnType("float");

                    b.Property<double>("WorkedHours")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId", "WorkedMonth", "WorkedYear");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("Infrastructure.Entities.Drug", b =>
                {
                    b.HasBaseType("Infrastructure.Entities.Product");

                    b.Property<string>("DrugCategory")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("DrugDosage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DrugDosageForm")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("DrugPharmaceuticalCategory")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("DrugRiskPregnancyCategory")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DrugScientificName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasDiscriminator().HasValue("Drug");
                });

            modelBuilder.Entity("Infrastructure.Entities.Batch", b =>
                {
                    b.HasOne("Infrastructure.Entities.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Entities.Cheque", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Manager")
                        .WithMany("Cheques")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("Cheques")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerOrder", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerOrderBatch", b =>
                {
                    b.HasOne("Infrastructure.Entities.Batch", "Batch")
                        .WithMany("CustomerOrderBatches")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrderBatches")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerPhone", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Infrastructure.Entities.DrugDisposal", b =>
                {
                    b.HasOne("Infrastructure.Entities.Batch", "Batch")
                        .WithMany("DrugDisposals")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("DrugDisposals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("DrugDisposals")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Employee");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Infrastructure.Entities.EmployeePhone", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("EmployeePhones")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Infrastructure.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("ReceiverEmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Employee", "Manager")
                        .WithMany("PayeeEmployeeSalaries")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("EmployeesSalaries")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Infrastructure.Entities.Income", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany("Incomes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("Incomes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Infrastructure.Entities.NameMenu", b =>
                {
                    b.HasOne("Infrastructure.Entities.Product", "Product")
                        .WithOne("NameMenu")
                        .HasForeignKey("Infrastructure.Entities.NameMenu", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierOrder", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Manager")
                        .WithMany("ManagedSupplierOrders")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Employee", "Receiver")
                        .WithMany("ReceivedSupplierOrders")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Receiver");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierOrderBatch", b =>
                {
                    b.HasOne("Infrastructure.Entities.Batch", "Batch")
                        .WithMany("SupplierOrderBatches")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.SupplierOrder", "SupplierOrder")
                        .WithMany("SupplierOrderBatches")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierPayment", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Manager")
                        .WithMany("ManagedSupplierPayments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Payment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierPhone", b =>
                {
                    b.HasOne("Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany("SupplierPhones")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Infrastructure.Entities.TaxesPayment", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Manager")
                        .WithMany("TaxesPayments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("TaxesPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Tax", "Tax")
                        .WithMany("TaxesPayments")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Payment");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Infrastructure.Entities.WorkHours", b =>
                {
                    b.HasOne("Infrastructure.Entities.Employee", "Employee")
                        .WithMany("WorkHours")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Infrastructure.Entities.Drug", b =>
                {
                    b.HasOne("Infrastructure.Entities.Product", "Product")
                        .WithOne("Drug")
                        .HasForeignKey("Infrastructure.Entities.Drug", "ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Entities.Batch", b =>
                {
                    b.Navigation("CustomerOrderBatches");

                    b.Navigation("DrugDisposals");

                    b.Navigation("SupplierOrderBatches");
                });

            modelBuilder.Entity("Infrastructure.Entities.Customer", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("CustomerPhones");

                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("Infrastructure.Entities.CustomerOrder", b =>
                {
                    b.Navigation("CustomerOrderBatches");
                });

            modelBuilder.Entity("Infrastructure.Entities.Employee", b =>
                {
                    b.Navigation("Cheques");

                    b.Navigation("CustomerOrders");

                    b.Navigation("DrugDisposals");

                    b.Navigation("EmployeePhones");

                    b.Navigation("Incomes");

                    b.Navigation("ManagedSupplierOrders");

                    b.Navigation("ManagedSupplierPayments");

                    b.Navigation("PayeeEmployeeSalaries");

                    b.Navigation("ReceivedSupplierOrders");

                    b.Navigation("ReceiverEmployeeSalaries");

                    b.Navigation("TaxesPayments");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("Infrastructure.Entities.Payment", b =>
                {
                    b.Navigation("Cheques");

                    b.Navigation("DrugDisposals");

                    b.Navigation("EmployeesSalaries");

                    b.Navigation("SupplierPayments");

                    b.Navigation("TaxesPayments");
                });

            modelBuilder.Entity("Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Drug")
                        .IsRequired();

                    b.Navigation("NameMenu")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierOrders");

                    b.Navigation("SupplierPayments");

                    b.Navigation("SupplierPhones");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupplierOrder", b =>
                {
                    b.Navigation("SupplierOrderBatches");
                });

            modelBuilder.Entity("Infrastructure.Entities.Tax", b =>
                {
                    b.Navigation("TaxesPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
